// config/lily58.keymap
// separate project now but i want to integrate it in lithos somehow in the future
// scripture must be renamed to kjarra related somehow in the future too

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/pointing.h>

#define _A        &kp A
#define _B        &kp B
#define _C        &kp C
#define _D        &kp D
#define _E        &kp E
#define _F        &kp F
#define _G        &kp G
#define _H        &kp H
#define _I        &kp I
#define _J        &kp J
#define _K        &kp K
#define _L        &kp L
#define _M        &kp M
#define _N        &kp N
#define _O        &kp O
#define _P        &kp P
#define _Q        &kp Q
#define _R        &kp R
#define _S        &kp S
#define _T        &kp T
#define _U        &kp U
#define _V        &kp V
#define _W        &kp W
#define _X        &kp X
#define _Y        &kp Y
#define _Z        &kp Z

#define _N0       &kp N0
#define _N1       &kp N1
#define _N2       &kp N2
#define _N3       &kp N3
#define _N4       &kp N4
#define _N5       &kp N5
#define _N6       &kp N6
#define _N7       &kp N7
#define _N8       &kp N8
#define _N9       &kp N9

#define _SP       &kp SPACE
#define _BS       &kp BSPC
#define _CBS      &kp LC(BSPC)
#define _DEL      &kp DEL
#define _ESC      &kp ESC
#define _ENT      &kp ENTER
#define _TAB      &kp TAB
#define _SCR      &kp PSCRN
#define _CAP      &kp CAPS

#define _LPR      &kp LPAR
#define _RPR      &kp RPAR
#define _LBR      &kp LBRC
#define _RBR      &kp RBRC
#define _LBK      &kp LBKT
#define _RBK      &kp RBKT
#define _COM      &kp COMMA
#define _DOT      &kp DOT
#define _QMK      &kp QMARK
#define _EXL      &kp EXCL
#define _GRV      &kp GRAVE
#define _SQT      &kp SQT
#define _DQT      &kp DQT
#define _EQL      &kp EQUAL
#define _CL       &kp COLON
#define _SCL      &kp SEMI
#define _LT       &kp LT
#define _GT       &kp GT
#define _AMP      &kp AMPS
#define _PIP      &kp PIPE
#define _FSH      &kp FSLH
#define _BSH      &kp BSLH
#define _CRT      &kp CARET
#define _TLD      &kp TILDE
#define _UND      &kp UNDER
#define _MNS      &kp MINUS
#define _PLS      &kp PLUS
#define _HSH      &kp HASH
#define _AST      &kp ASTRK
#define _DLR      &kp DLLR
#define _AT       &kp AT
#define _PNT      &kp PRCNT

#define _LFT      &kp LEFT
#define _DWN      &kp DOWN
#define _UP       &kp UP
#define _RHT      &kp RIGHT

#define _LG       &kp LGUI
#define _LA       &kp LALT
#define _LC       &kp LCTRL
#define _LS       &kp LSHFT
#define _RG       &kp RGUI
#define _RA       &kp RALT
#define _RC       &kp RCTRL
#define _RS       &kp RSHFT

#define _CUT      &kp LC(X)
#define _CP       &kp LC(C)
#define _PS       &kp LC(V)
#define _SCP      &kp LC(LS(C))
#define _SPS      &kp LC(LS(V))
#define _ALL      &kp LC(A)
#define _UDO      &kp LC(Z)
#define _RDO      &kp LC(LS(Z))
#define _SAV      &kp LC(S)
#define _REF      &kp LC(R)
#define _DTS      &kp LC(LS(I))
#define _FND      &kp LC(F)
#define _SEN      &kp LS(ENTER)
#define _CEN      &kp LC(ENTER)

#define _TBB      &kp LC(LS(T))
#define _TBC      &kp LC(W)
#define _TBN      &kp LC(T)
#define _TBL      &kp LC(LS(TAB))
#define _TBR      &kp LC(TAB)

#define _GLS      &glyph_start
#define _GLE      &glyph_end
#define _ARF      &arrow_func

#define _ATB      &altb 0 0

#define _MB1      &mkp MB1
#define _MB2      &mkp MB2
#define _MB3      &mkp MB3

#define _F14      &kp F14
#define _F15      &kp F15
#define _F16      &kp F16
#define _F17      &kp F17
#define _F18      &kp F18
#define _F19      &kp F19

#define _L1      &layer 1 1
#define _L2      &layer 2 2
#define _L3      &layer 3 3
#define _L4      &layer 4 4

#define ____      &none
#define mmmm      &none
#define xxxx      &none
/ {
    keymap {
        compatible = "zmk,keymap";
        l0 { bindings = <
____ _L2  _L3  ____ ____ ____           _Q   _K   _R   _L   _P   _F
mmmm ____ _COM _O   _F14 _ATB           _D   _T   _S   _N   _C   _X
_ESC _DOT _U   _E   _SP  _ENT           _J   _G   _B   _V   _W   _Z
_L1  _A   _Y   _CBS _BS  ____ ____ ____ ____ _M   _RS  ____ ____ ____
               ____ _LS  _I   _L4  ____ _H   ____ ____ 
        >; };
        l1 { bindings = <
____ mmmm mmmm ____ ____ ____           mmmm _LBR _CL  _GRV _RBR _EXL
mmmm ____ _TBB _TBL _F15 _TAB           _FSH _LPR _MNS _DQT _RPR _QMK
xxxx mmmm _TBC _TBR _TBN mmmm           mmmm _LBK _UND _SQT _RBK mmmm
____ mmmm mmmm mmmm _F16 ____ ____ ____ ____ mmmm ____ ____ ____ ____
               ____ ____ _F17 _F18 ____ mmmm ____ ____
        >; };
        l2 { bindings = <
____ xxxx _SAV ____ ____ ____           mmmm mmmm mmmm mmmm mmmm mmmm
_SCP ____ mmmm _SPS mmmm mmmm           mmmm mmmm mmmm mmmm mmmm mmmm
mmmm mmmm mmmm mmmm mmmm mmmm           mmmm mmmm mmmm mmmm mmmm mmmm
____ mmmm mmmm mmmm _CEN ____ ____ ____ ____ mmmm ____ ____ ____ ____
               ____ ____ _SEN _CAP ____ mmmm ____ ____
        >; };
        l3 { bindings = <
____ _ALL xxxx ____ ____ ____           mmmm _N7  _N8  _N9  mmmm mmmm
_CP  ____ mmmm _PS  mmmm mmmm           mmmm _N4  _N5  _N6  mmmm mmmm
_CUT mmmm mmmm mmmm mmmm mmmm           mmmm _N1  _N2  _N3  mmmm mmmm
____ mmmm mmmm mmmm _MB2 ____ ____ ____ ____ mmmm ____ ____ ____ ____
               ____ ____ _MB1 _MB3 ____ _N0  ____ ____
        >; };
        l4 { bindings = <
____ mmmm _SCR ____ ____ ____           mmmm mmmm mmmm mmmm mmmm mmmm
mmmm ____ _UDO _UP  _RDO mmmm           mmmm mmmm mmmm mmmm mmmm mmmm
mmmm mmmm _LFT _DWN _RHT mmmm           mmmm mmmm mmmm mmmm mmmm mmmm
____ mmmm mmmm mmmm mmmm ____ ____ ____ ____ mmmm ____ ____ ____ ____
               ____ ____ mmmm xxxx ____ mmmm ____ ____
        >; };
    };
    behaviors {
        ol: ol {
            compatible = "zmk,behavior-oneshot-layer";
            #binding-cells = <1>;
            release-after-ms = <1000>;
        };
        glyph_start: glyph_start {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT>, <&kp PIPE>;
        };
        glyph_end: glyph_end {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PIPE>, <&kp GT>;
        };
        arrow_func: arrow_func {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&kp GT>;
        };
        altb: alt_tab {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&alt_tab_hold>, <&alt_tab_tap>;
        };
        layer: layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&ol>;
        };
    };
    macros {
        alt_tab_tap: alt_tab_tap {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <20>;
            bindings = <&macro_press &kp LALT>, <&macro_tap &kp TAB>, <&macro_release &kp LALT>;
        };
        alt_tab_hold: alt_tab_hold {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <20>;
            bindings = <&macro_press &kp LALT>, <&macro_tap &kp TAB>, <&macro_pause_for_release>, <&macro_release &kp LALT>;
        };
    };
};