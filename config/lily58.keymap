// ☷ ~/config/lily58.keymap
// separate project now but i want to integrate it in lithos somehow in the future
// scripture must be renamed to kjarra related somehow in the future too

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#define _ &none // to show where there is no buttons

// ESC       ENTER     BSPC      DEL       TAB
// LEFT      DOWN      UP        RIGHT
// LGUI      LALT      LCTRL     LSHFT
// RGUI      RALT      RCTRL     RSHFT

// LT    <   GT    >   EQUAL =   AMPS  &   PIPE  |   UNDER _
// PLUS  +   MINUS -   ASTRK *   DLLR  $   AT    @   HASH  #   PRCNT %

// GRAVE `   SQT   '   DQT   "   COLON :   SEMI  ;   FSLH  /   BSLH  \
// LPAR  (   RPAR  )   LBKT  [   RBKT  ]   LBRC  {   RBRC  }

// DOT   .   COMMA ,   QMARK ?   EXCL  !   CARET ^   TILDE ~   

 / {
    keymap {
        compatible = "zmk,keymap";
        l0 {
            bindings = <
_         &mo 1 &mo 2 &kp X _         _                   _         _       &kp Z     &mo 2 &mo 1 _
&kp N     _     &kp F &kp M &altb 0 0 &kp ESC             &kp ENTER &kp TAB &kp BSPC  &kp G _     &kp Y
_         &kp H &kp C &kp W &kp T     &mo 3               &mo 3     &kp E   &kp SPACE &kp P &kp I _
&kp LSHFT &kp L &kp V &kp K &kp D     _       _     _     _         &kp U   &kp B     &kp Q &kp J &kp RSHFT
                      _     &kp S     &kp R   &mo 4 &mo 4 &kp O     &kp A   _
            >;
        };
        l1 {
            bindings = <
_     &none     &none     &none    _        _                    _      _      &none  &none  &none _
&none _         &kp GRAVE &kp SQT  &kp DQT  &none                &none  &kp N7 &kp N8 &kp N9 _     &none
_     &kp COLON &kp LPAR  &kp LBKT &kp LBRC &none                &none  &kp N4 &kp N5 &kp N6 &none _
&none &kp SEMI  &kp RPAR  &kp RBKT &kp RBRC _        _     _     _      &kp N1 &kp N2 &kp N3 &none &none
                          _        &kp BSLH &kp FSLH &none &none &kp N0 &none  _
            >;
        };
        l2 {
            bindings = <
_     &none     &none     &none    _        _                    _        _         &none     &none     &none     _
&none _         &kp GRAVE &kp SQT  &kp DQT  &none                &none    &kp LT    &kp GT    &kp EQUAL _         &none
_     &kp COLON &kp LPAR  &kp LBKT &kp LBRC &none                &none    &kp ASTRK &kp UNDER &kp PLUS  &kp MINUS _
&none &kp SEMI  &kp RPAR  &kp RBKT &kp RBRC _        _     _     _        &kp DLLR  &kp AT    &kp HASH  &kp PRCNT &none
                          _        &kp BSLH &kp FSLH &none &none &kp AMPS &kp PIPE  _
            >;
        };
        l3 {
            bindings = <
_     &none     &none     &none     _         _                 _          _           &none        &none        &none           _
&none _         &none     &none     &none     &none             &none      &none       &kp C_VOL_DN &kp C_VOL_UP _               &none
_     &kp QMARK &kp EXCL  &kp DOT   &kp COMMA &none             &none      &kp LEFT    &kp DOWN     &kp UP       &kp RIGHT       _
&none &none     &kp CARET &kp TILDE &none     _     _     _     _          &kp LC(TAB) &kp C_BRI_DN &kp C_BRI_UP &kp LC(LS(TAB)) &none
                          _         &none     &none &none &none &kp C_MUTE &none    _
            >;
        };
        l4 {
            bindings = <
_         &none     &none     &none     _               _                     _       _         &none         &none     &none _
&kp LC(Z) _         &kp LC(F) &none     &none           &none                 &none   &none     &none         &none     _     &kp LC(LS(Z))
_         &none     &kp LC(C) &kp LC(W) &kp LC(T)       &none                 &none   &none     &none         &kp LC(V) &none _
&none     &kp LC(L) &none     &none     &kp (LC(LS(I))) _         _     _     _       &none     &kp LC(LS(T)) &none     &none &none
                              _         &kp LC(S)       &kp LC(R) &none &none &none   &kp LC(A) _
            >;
        };
    };
    macros {
        alt_tab_tap: alt_tab_tap {
            compatible = "zmk,behavior-macro";
            label = "Alt‑Tab Tap";
            #binding-cells = <0>;
            wait-ms = <5>;
            tap-ms = <10>;
            bindings = <&macro_press &kp LALT>, <&macro_tap &kp TAB>, <&macro_release &kp LALT>;
        };
        alt_tab_hold: alt_tab_hold {
            compatible = "zmk,behavior-macro";
            label = "Alt‑Tab Hold";
            #binding-cells = <0>;
            wait-ms = <5>;
            tap-ms = <10>;
            bindings = <&macro_press &kp LALT>, <&macro_tap &kp TAB>, <&macro_pause_for_release>, <&macro_release &kp LALT>;
        };
    };
    behaviors {
        altb: alt_tab {
            compatible = "zmk,behavior-hold-tap";
            label = "Alt-Tab Key";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&alt_tab_hold>, <&alt_tab_tap>;
        };
    };
};
